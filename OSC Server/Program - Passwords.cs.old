//#define PASSWORDS
#define MACFILTER

using System;
using System.Collections.Generic;
using System.Data.SQLite;
using Dns = System.Net.Dns;
using System.Text;
using System.Security.Cryptography;

using TouchOSC;

namespace TouchOSC_Server
{
#if PASSWORDS
	class User
	{
		public     long  ID           { get; set; }
		public   string  Username     { get; set; }
		public DateTime? TimeLastUsed { get; set; }
		public DateTime  TimeCreated  { get; set; }
		public     long  TimesUsed    { get; set; }
		public   string  LastUsedBy   { get; set; }
	}
#endif

	class Program
	{
		static    int ServerPort = TouchOSCServer.DefaultPort;
		static string ServerName = string.Format("TouchOSC Server {0}", Dns.GetHostName());

		static SQLiteConnection SQLiteDB;

		/*TEMPORARY CODE*/
		static object ConsoleLock = new object();
		/*TEMPORARY CODE*/

		static void Main(string[] args)
		{
			Console.Title = ServerName;

			ConsoleColor StartColor = Console.ForegroundColor;
			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine("Client Found");
			Console.ForegroundColor = ConsoleColor.Red;
			Console.WriteLine("Client Lost");
			Console.ForegroundColor = ConsoleColor.Yellow;
			Console.WriteLine("Packet Received");
			Console.ForegroundColor = ConsoleColor.Magenta;
			Console.WriteLine("Packet Sent");
			Console.ForegroundColor = StartColor;
			Console.WriteLine();

			SQLiteConnectionStringBuilder SQLiteConnectionString = new SQLiteConnectionStringBuilder();
			SQLiteConnectionString.Add("Data Source", "osc.s3db");

			using (SQLiteDB = new SQLiteConnection(SQLiteConnectionString.ToString()))
			using (TouchOSCServer Server = new TouchOSCServer(ServerPort, ServerName))
			{
				SQLiteDB.Open();

				Server.ClientFound += new TouchOSCClientFoundHandler(Server_ClientFound);
				Server.ClientLost += new TouchOSCClientLostHandler(Server_ClientLost);
				Server.PacketReceived += new TouchOSCPacketReceivedHandler(Server_PacketReceived);
				Server.PacketSent += new TouchOSCPacketSentHandler(Server_PacketSent);
				Server.Start();

				while (Console.ReadLine() == null) ;

				SQLiteDB.Close();
			}
		}

		static void Server_ClientFound(object sender, TouchOSCClientFoundEventArgs e)
		{
			/*TEMPORARY CODE*/
			lock (ConsoleLock)
			{
				ConsoleColor StartColor = Console.ForegroundColor;
				Console.ForegroundColor = ConsoleColor.Green;
				Console.WriteLine("{3} {0}:{1} {2}", e.Client.Destination.Address, e.Client.Destination.Port, e.Client.FullName, e.Time.ToString("HH:mm:ss"));
				Console.ForegroundColor = StartColor;
			}
			/*TEMPORARY CODE*/

#if PASSWORDS
			e.Client.Properties.Add("Password", new StringBuilder());
			e.Client.Properties.Add("User", null);

			e.Client.Send("/1", "");
			e.Client.Send("/1/pass", "");
			e.Client.Send("/1/state/color", "red");
			e.Client.Send("/1/state", 1);
#endif
		}

		static void Server_ClientLost(object sender, TouchOSCClientLostEventArgs e)
		{
			/*TEMPORARY CODE*/
			lock (ConsoleLock)
			{
				ConsoleColor StartColor = Console.ForegroundColor;
				Console.ForegroundColor = ConsoleColor.Red;
				Console.WriteLine("{3} {0}:{1} {2}", e.Client.Destination.Address, e.Client.Destination.Port, e.Client.FullName, e.Time.ToString("HH:mm:ss"));
				Console.ForegroundColor = StartColor;
			}
			/*TEMPORARY CODE*/
		}

		static void Server_PacketReceived(object sender, TouchOSCPacketReceivedEventArgs e)
		{
			/*TEMPORARY CODE*/
			lock (ConsoleLock)
			{
				ConsoleColor StartColor = Console.ForegroundColor;
				Console.ForegroundColor = ConsoleColor.Yellow;
				Console.Write("{3} {0}:{1} {2}", e.Client.Destination.Address, e.Client.Destination.Port, e.Packet.Address, e.Time.ToString("HH:mm:ss"));

				for (int i = 0; i < e.Packet.Data.Length; i++)
					Console.Write(" " + e.Packet.Data[i]);

				Console.WriteLine();
				Console.ForegroundColor = StartColor;
			}
			/*TEMPORARY CODE*/

#if PASSWORDS
			if (e.Packet.Address.StartsWith("/1"))
			{
				if (e.Packet.Address.Length == 11
					&& e.Packet.Address.StartsWith("/1/keypad/")
					&& e.Packet.IsDown)
				{
					         char Button   = e.Packet.Address[10];
					StringBuilder Password = (StringBuilder)e.Client.Properties["Password"];

					if (Button == 'A')
					{
						if (Password.Length > 1)
						{
							Password.Remove(Password.Length - 1, 1);
							e.Client.Send("/1/pass", Password[Password.Length - 1]
								.ToString()
								.PadLeft(Password.Length, '*'));
						}
						else if (Password.Length == 1)
						{
							Password.Remove(Password.Length - 1, 1);
							e.Client.Send("/1/pass", "");
						}
					}
					else if (Button == 'B') ;
					else if (Button == 'C') ;
					else if (Button == 'D')
					{
						User User = null;
						User Prev = e.Client.Properties["User"] as User;

						using (    SHA512Cng Sha512  = new SHA512Cng())
						using (SQLiteCommand Command = SQLiteDB.CreateCommand())
						{
							byte[] Hash = Sha512.ComputeHash(Encoding.ASCII.GetBytes(Password.ToString()));
							Password.Clear();

							Command.CommandText = "SELECT * FROM osc_users WHERE password = @password LIMIT 1";
							Command.Parameters.Add(new SQLiteParameter("@password", BitConverter.ToString(Hash)));

							using (SQLiteDataReader DataReader = Command.ExecuteReader())
							{
								if (DataReader.HasRows)
								{
									User = new User
									{
										ID = (long)DataReader["id"],
										LastUsedBy = DataReader["lastUsedBy"] as string,
										//Password = (string)DataReader["password"],
										TimeCreated = (DateTime)DataReader["timeCreated"],
										TimeLastUsed = DataReader["timeLastUsed"] as DateTime?,
										TimesUsed = (long)DataReader["timesUsed"],
										Username = (string)DataReader["username"]
									};
								}
							}
						}

						if (User != null && (Prev == null || User.ID != Prev.ID))
						{
							using (SQLiteCommand Command = SQLiteDB.CreateCommand())
							{
								Command.CommandText = "UPDATE osc_users SET timeLastUsed = @timeLastUsed, timesUsed = @timesUsed, lastUsedBy = @lastUsedBy WHERE id = @id";
								Command.Parameters.Add(new SQLiteParameter("@id", User.ID));
								Command.Parameters.Add(new SQLiteParameter("@timeLastUsed", DateTime.Now));
								Command.Parameters.Add(new SQLiteParameter("@timesUsed", User.TimesUsed + 1));
								Command.Parameters.Add(new SQLiteParameter("@lastUsedBy", e.Client.HostName));
								Command.ExecuteNonQuery();
							}
						}

						e.Client.Properties["User"] = User;
						e.Client.Send("/1/pass", User != null
							? string.Format("Welcome {0}", User.Username)
							: "Invalid");
						e.Client.Send("/1/state/color", User != null
							? "green"
							: "red");
						e.Client.Send("/1/state", 1);
					}
					else if (Button == '*') ;
					else if (Button == '#') ;
					else
					{
						Password.Append(Button);
						e.Client.Send("/1/pass", Button.ToString().PadLeft(Password.Length, '*'));
					}
				}
			}
			else if (e.Client.Properties["User"] == null)
				e.Client.Send("/1", "");
#else
			if (e.Client.MACAddress != null)
			{

			}
#endif
			else if (e.Packet.Address == "/2/toggle1")
			{
				e.Client.Send("/2/toggle1", e.Packet.Data[0]);
			}
		}

		static void Server_PacketSent(object sender, TouchOSCPacketSentEventArgs e)
		{
			/*TEMPORARY CODE*/
			lock (ConsoleLock)
			{
				ConsoleColor StartColor = Console.ForegroundColor;
				Console.ForegroundColor = ConsoleColor.Magenta;
				Console.Write("{3} {0}:{1} {2}", e.Client.Destination.Address, e.Client.Destination.Port, e.Packet.Address, e.Time.ToString("HH:mm:ss"));

				for (int i = 0; i < e.Packet.Data.Length; i++)
					Console.Write(" " + e.Packet.Data[i]);

				Console.WriteLine();
				Console.ForegroundColor = StartColor;
			}
			/*TEMPORARY CODE*/
		}
	}
}